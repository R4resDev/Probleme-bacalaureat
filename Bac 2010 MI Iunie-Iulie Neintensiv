// Subiectul I
// 1. a.
// 2. a. 44543
// b. 420, 820, 920
// c.
repetă
	instrucțiuni
până când

instrucțiuni
cât timp not condiție execută
	instrucțiuni
// d.
#include <iostream>
using namespace std;

int main()
{
    int n, m, c;
    cin >> n;
    m = 0;
    do
    {
        c = n % 10;
        n /= 10;
        if (c > 5)
            c /= 2;
        m = m * 10 + c;
    } while (n != 0);
    cout << m;
    return 0;
}

// Subiectul al II-lea
// 1. d.
// 2. b.
// 3.
#include <iostream>
using namespace std;

int main()
{
    int n, i, j, a[20][20];
    cin >> n;
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            a[i][j] = 2 * i + j + 1;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
            cout << a[i][j] << " ";
        cout << endl;
    }
    return 0;
}
// 4. 3, 4, 8
// 5.
#include <iostream>
#include <cstring>
using namespace std;

int main()
{
    char s[100], *cuvant;
    int i;
    cin.getline(s, 100);
    cuvant = strtok(s, " ");
    while (cuvant != NULL)
    {
        for (i = 0; i < strlen(cuvant); i++)
            if (cuvant[i] == '.')
                strcpy(cuvant, "");
        cout << cuvant << " ";
        cuvant = strtok(NULL, " ");
    }
    return 0;
}

// Subiectul al III-lea
// 1. d.
// 2. (garoafă, frezie, mac, lalea, narcisă), (garoafă, frezie, mac, narcisă, lalea)
// 3.
#include <iostream>
using namespace std;

void tablou(int n, int k, int a[])
{
    int i, nr = 0;
    for (i = 0; i < n * k; i++)
    {
        if (i % k == 0)
            nr++;
        a[i] = nr;
    }
}

int main()
{
    int n, k, a[200], i;
    cin >> n >> k;
    tablou(n, k, a);
    for (i = 0; i < n * k; i++)
        cout << a[i] << " ";
    return 0;
}
// 4.
// a.
#include <iostream>
#include <fstream>
using namespace std;

int main()
{
    int n, a[10000]={0}, i;
    ifstream f("BAC.TXT");
    while (f >> n)
        a[n]++;
    for (i = 0; i < 10000; i++)
        if (a[i] > 0 && i % 2 == 0)
            cout << i << " ";
    f.close();
    return 0;
}
// b.
Descrierea algoritmului:
Programul citește numerele naturale din fișierul "BAC.TXT" și stabilește frecvența fiecăruia în vectorul a. Apoi, parcurge vectorul și afișează toate numerele pare care au apărut în fișier cel puțin o dată.

Eficiența algoritmului:
Algoritmul este eficient din punct de vedere al memoriei, având o complexitate constantă O(1), deoarece nu reține nicăieri numerele din fişier, indiferent de dimensiunea fișierului sau de valoarea lui n, iar vectorul de frecvență are o dimensiune fixă de 10000 de elemente.

Algoritmul este eficient din punct de vedere al timpului, având o complexitate liniară O(n), unde n reprezintă numărul total de numere din fișier, deoarece parcurge fiecare număr o singură dată, iar parcurgerea vectorului de frecvență are o complexitate constantă O(10000), ceea ce poate fi considerat constant în raport cu n, deoarece acest număr nu se schimbă.
